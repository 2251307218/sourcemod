# vim: set sts=2 ts=2 sw=2 tw=99 et ft=python:
import os

# Build gtest library
binary = builder.cxx.StaticLibrary('libgtest')

binary.compiler.includes += [
  os.path.join(builder.sourcePath, 'tests', 'googletest', 'googletest', 'include'),
  os.path.join(builder.sourcePath, 'tests', 'googletest', 'googletest'),
]

binary.sources += [
  os.path.join(builder.sourcePath, 'tests', 'googletest', 'googletest', 'src', 'gtest-all.cc'),
]

libgtest = builder.Add(binary)

# Build test suite
binary = builder.cxx.Program('tests');

binary.sources += [
  'main.cpp',
  
  os.path.join('public', 'sm_argbuffer.cpp'),
  os.path.join('public', 'sm_memtable.cpp'),
  os.path.join('public', 'sm_namehashset.cpp'),
  os.path.join('public', 'sm_stringhashmap.cpp'),
  os.path.join('public', 'sm_queue.cpp'),
  
  os.path.join('logic', 'datapack.cpp'),
  os.path.join(builder.sourcePath, 'core', 'logic', 'CDataPack.cpp'),
]

binary.compiler.includes += [
  os.path.join(SM.mms_root, 'core', 'sourcehook'),
  os.path.join(builder.sourcePath, 'public'),
  os.path.join(builder.sourcePath, 'public', 'amtl'),
  os.path.join(builder.sourcePath, 'public', 'amtl', 'amtl'),
  os.path.join(builder.sourcePath, 'tests', 'googletest', 'googletest', 'include'),
  os.path.join(builder.sourcePath, 'core', 'logic'),
  os.path.join(builder.sourcePath, 'sourcepawn', 'include'),
]

# Link libgtest to our test suite
binary.compiler.linkflags += [
  libgtest.binary,
]

if binary.compiler.like('gcc'):
  binary.compiler.cxxflags += [
    '-std=c++14',
    '-O3',
  ]
  binary.compiler.linkflags.append('-lpthread')

builder.Add(binary)
